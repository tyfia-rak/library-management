openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD22016
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Authors
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        # TODO3: add parameter to filter books by intervals of dates of the releaseDate
        - in: query
          name: releaseDateStart
          description: Filter books by start date of release
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: releaseDateEnd
          description: Filter books by end date of release
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: page
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      description: Get a list of all authors or filter by name.
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name
          required: false
          schema:
            type: string
        - in: query
          name: page
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      tags:
        - Authors
      summary: Create or update an author
      operationId: crupdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The created or updated author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    delete:
      tags:
        - Authors
      summary: Delete an author
      operationId: deleteAuthor
      parameters:
        - in: query
          name: authorId
          description: ID of the author to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /books/{bookId}/authors/{authorId}:
    put:
      summary: update author's book
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: integer
            format: int64
          description: ID book to update
        - in: path
          name: authorId
          required: true
          schema:
            type: integer
            format: int64
          description: New Id author
      responses:
        '200':
          description: Successfully
        '404':
          description: Book not found
  /books/authors:
    put:
      summary: Update authors for multiple books
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  bookId:
                    type: integer
                    format: int64
                    description: The ID of the book to update
                  authorId:
                    type: integer
                    format: int64
                    description: The ID of the new author
                required:
                  - bookId
                  - authorId
      responses:
        '200':
          description: Update successful
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          # TODO1: set it as a component with properties : id, name, sex (M or F)
          $ref: '#/components/schemas/Author'
        CrupdateBook:
          $ref: '#/components/schemas/CrupdateBook'
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    CrupdateBook:
      type: object
      properties:
        ID:
          type: integer
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
        releaseDate:
          type: string
          format: date
